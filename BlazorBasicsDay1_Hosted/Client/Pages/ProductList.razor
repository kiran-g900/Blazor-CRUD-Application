@page "/products-api"

@using BlazorBasicsDay1_Hosted.Client.Components
@using BlazorBasicsDay1_Hosted.Client.Models
@using BlazorBasicsDay1_Hosted.Client.Services
@using BlazorBasicsDay1_Hosted.Client.Shared
@inject IProductService ProductService
@inject NavigationManager Navigation

<h3>Products</h3>

@* <AddProduct OnProductAdded="HandleProductAdded" /> *@
<ProductForm NewProduct="@product" SubmitProduct="HandleProductAdded" />

@if (!string.IsNullOrEmpty(addMessage))
{
    <br />
    <Alert AlertClass="@(isAdded ? "alert-success" : "alert-danger")">@addMessage</Alert>
}

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @foreach (var product in products)
        {
            <li>
                <a href="/product-details/@product.Id"> @product.Name - ₹@product.Price </a>
                <button class="btn btn-warning me-2 btn-sm" 
                        @onclick="@(() => Navigation.NavigateTo($"/edit-product/{product.Id}"))">
                    Edit
                </button>
                <button class="btn btn-danger me-2 btn-sm"
                    @onclick="@(() => DeleteProduct(product.Id))">
                    Delete
                </button>
            </li>
        }
    </ul>
}

@code {
    private List<ProductsModel> products;
    private ProductsModel product = new();

    private bool isAdded = false;
    private string addMessage = "";

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task HandleProductAdded()
    {
        var result = await ProductService.AddProductAsync(product);
        if (result)
        {
            isAdded = true;
            addMessage = "Product Added successfully!";
            products = await ProductService.GetProductsAsync();
        }
        else
        {
            isAdded = false;
            addMessage = "Failed to add Product!";
        }
        StateHasChanged();
        await Task.Delay(3000);
        addMessage = "";
        StateHasChanged();
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        products = await ProductService.GetProductsAsync();
    }
}
